#!/bin/bash -l
##[RUN] WALLTIME	6:00:00
##[RUN] MEMORY	30gb
##[RUN] NODES	1
##[RUN] CORES_PER_NODE	20
##[RUN] NAME	de_summary
##[RUN] ACCOUNT	default_project
##[VERSION] pika 16.08
##[HELP] This tool will summarize the results of deseq, edger, deseq2 and bayseq 
##[HELP] This scripts runtime is limited (few minutes)
##
##[HOWTO] #Differential Expression Summary
##[HOWTO] #Create a data file (conditions.txt), with a CONDITION1, CONDITION2 and a TYPE column
##[HOWTO] #Create a sample_condition.csv file in the OUTPUT_DIR. This comma seperated file has a header: SAMPLE,CONDITION and with each sample the correct condition.
##[HOWTO] #This uses worker
##[HOWTO] module load worker
##[HOWTO] #start the module:
##[HOWTO] wsub -batch de_summary.pbs -data conditions.txt 
#loading the modules
#extra_modules

#setting all parameters (these could be changed)
PROJECT_DIR="";
SAMPLE_DIR="$PROJECT_DIR";
OUTPUT_DIR="$PROJECT_DIR/de_summary";
SCRATCH_DIR=~;
R_SCRIPT_DIR="$PROJECT_DIR/jobs";

#the actual script
COMP_NAME=$CONDITION1"_"$CONDITION2"_"$TYPE;
CUR_DIR=$(dirname $0);

JOBID="";
mkdir -p $SCRATCH_DIR/$JOBID;
TMPDIR=$SCRATCH_DIR/$JOBID;
TMP_DIR=`mktemp -d -t tmp.XXXXXXXX`;
cd $TMP_DIR;

#DESeq results
rsync -ahrL $SAMPLE_DIR/deseq/$COMP_NAME/*.analysis_result_table.csv $COMP_NAME".deseq.csv";
#EdgeR results
rsync -ahrL $SAMPLE_DIR/edger/$COMP_NAME/*.toptags_edgeR.csv $COMP_NAME".edger.csv";
#DESeq2 results
rsync -ahrL $SAMPLE_DIR/deseq2/$COMP_NAME/*_results.csv $COMP_NAME".deseq2.csv";
#bayseq result
rsync -ahrL $SAMPLE_DIR/bayseq/$COMP_NAME/*_bayseq_results.csv $COMP_NAME".bayseq.csv";

#create tmp files
cat $COMP_NAME".deseq.csv" | sed 's:"::g' | awk -v FS=',' -v OFS='\t' '{if(NR==1){for(i=1;i<=NF;i++){header[$i]=i} print "__gene","deseq_log2FoldChange","deseq_padj"; next;} print $header["id"],$header["log2FoldChange"],$header["padj"]}' > deseq.tsv;
cat $COMP_NAME".edger.csv" | sed 's:"::g' | awk -v FS=',' -v OFS='\t' '{if(NR==1){for(i=1;i<=NF;i++){header[$i]=i} print "__gene","edger_logFC","edger_FDR"; next;} print $header[""],$header["logFC"],$header["FDR"]}' > edger.tsv;
cat $COMP_NAME".deseq2.csv" | sed 's:"::g' | awk -v FS=',' -v OFS='\t' '{if(NR==1){for(i=1;i<=NF;i++){header[$i]=i} print "__gene","deseq2_log2FoldChange","deseq2_padj"; next;} print $header[""],$header["log2FoldChange"],$header["padj"]}' > deseq2.tsv;
cat $COMP_NAME".bayseq.csv" | sed 's:"::g' | awk -v FS=',' -v OFS='\t' '{if(NR==1){for(i=1;i<=NF;i++){header[$i]=i} print "__gene","bayseq_ordering","bayseq_FDR"; next;} print $header[""],$header["ordering"],$header["FDR.DE"]}' > bayseq.tsv; 

sort -k1,1 deseq.tsv > deseq.sorted;
sort -k1,1 edger.tsv > edger.sorted;
sort -k1,1 deseq2.tsv > deseq2.sorted;
sort -k1,1 bayseq.tsv > bayseq.sorted;

join -j 1 -a1 -a2 -e NA -o 0,1.2,1.3,2.2,2.3 deseq.sorted edger.sorted | join -j 1 -a1 -a2 -e NA -o 0,1.2,1.3,1.4,1.5,2.2,2.3 - deseq2.sorted | join -j 1 -a1 -a2 -e NA -o 0,1.2,1.3,1.4,1.5,1.6,1.7,2.2,2.3 - bayseq.sorted | sed 's: :\t:g' > tmp.join;
grep "__gene" tmp.join | sed 's:__gene:Gene:g' > $COMP_NAME".genes.tsv";
grep -v "__gene" tmp.join >> $COMP_NAME".genes.tsv";

rm deseq.tsv edger.tsv deseq2.tsv bayseq.tsv deseq.sorted edger.sorted deseq2.sorted bayseq.sorted tmp.join;

#add interesting graphs in the summary
rsync -ahrL $SAMPLE_DIR/deseq/$COMP_NAME/*.heatmap_sample_to_sample_distances.eps $COMP_NAME".deseq.heatmap_sample_to_sample_distances.eps";
rsync -ahrL $SAMPLE_DIR/deseq/$COMP_NAME/*.PCA_plot.eps $COMP_NAME".deseq.PCA_plot.eps";
rsync -ahrL $SAMPLE_DIR/edger/$COMP_NAME/*.MDS_plot.eps $COMP_NAME".edger.MDS_plot.eps";
rsync -ahrL $SAMPLE_DIR/edger/$COMP_NAME/*.libsize_plot.eps $COMP_NAME".edger.libsize_plot.eps";
rsync -ahrL $SAMPLE_DIR/deseq2/$COMP_NAME/*.PCA_plot.eps $COMP_NAME".deseq2.PCA_plot.eps";
rsync -ahrL $SAMPLE_DIR/deseq2/$COMP_NAME/*.PCAplot_adjusted.eps $COMP_NAME".deseq2.PCA_plot.eps";
rsync -ahrL $SAMPLE_DIR/deseq2/$COMP_NAME/*.heatmap_sample_to_sample_distances.eps $COMP_NAME".deseq2.heatmap_sample_to_sample_distances.eps";
rsync -ahrL $SAMPLE_DIR/bayseq/$COMP_NAME/*.bayseq_maplot.eps $COMP_NAME".bayseq.MAplot.eps";
rsync -ahrL $SAMPLE_DIR/bayseq/$COMP_NAME/*.bayseq_posteriors.eps $COMP_NAME".bayseq.posteriors.eps";


for i in `ls $SAMPLE_DIR/trimmomatic/*log | sed 's:$SAMPLE_DIR/trimmomatic/::g' | sed 's:.log::g'`; 
do 
	echo $i; 
	grep 'Input' $SAMPLE_DIR/trimmomatic/$i.log | 
		awk '{split($0, arr, " "); print "Total reads: "arr[3]; print "Kept after trimming: "arr[5]}'; 
	tail -n 3 $SAMPLE_DIR/mapped/$i.*.log | 
		awk '{if($0~"exactly"){print "Uniquely mapped: " $1;}else{print "Multi-mapping: "$1;}}' | head -n 2; 
	head -n -5 $SAMPLE_DIR/htseq/$i.htseq_a0_genes_strand_intersectionNonempty.counts | 
		awk '{sum+=$2}END{print "Flexible usable: "sum;}'; 
	head -n -5 $SAMPLE_DIR/htseq/$i.htseq_a10_genes_nostrand_union.counts | 
		awk '{sum+=$2}END{print "Strict usable: "sum;}'; 
done | 
	awk 'BEGIN{print "SAMPLE\tTotal Reads\tKept after Trimming\tMapped Unique\tMultiMapping\tUseable For DE (flexible)\tUseable For DE (strict)"}{if(NR%7==1){if(line != ""){print line;} line=$1;}else{split($0,arr,":"); line=line"\t"arr[2]}}END{print line;}' | 
	awk 'BEGIN{OFS="\t"; FS="\t"}{if(NR==1){$8=$7; $7=$6; $6="Total Mapped"}else{$8=$7; $7=$6; $6=$4+$5;} print $0}' | 
	awk 'BEGIN{OFS="\t"; FS="\t"}{if(NR!=1){for(i=3;i<=NF;i++){$i=$i" ("($i/$2*100)"%)";}} print $0;}' > $COMP_NAME".read.summary.tsv";



mkdir -p $OUTPUT_DIR/$COMP_NAME;
cd $OUTPUT_DIR/$COMP_NAME;
rsync --progress -ahrL $TMP_DIR/* .;
rm -r $TMP_DIR;


