#!/bin/bash -l
##[RUN] WALLTIME	24:00:00
##[RUN] MEMORY	122gb
##[RUN] NODES	4
##[RUN] CORES_PER_NODE	20
##[RUN] NAME	qualimap
##[RUN] ACCOUNT	default_project
##[VERSION] pika1804
##[HELP] This is a batch script: it uses SAMPLE parameters
##[HELP] This script will generate a counts file, with the counts of given features
##[HELP] This script will use only one cpu
##[HELP] This script runs only a 1 minute per 1M reads
##
##[HOWTO] #Qualimap
##[HOWTO] #Create a data file (samples.txt), with a SAMPLE column
##[HOWTO] #start the module:
##[HOWTO] pikasub qualimap.pbs
##
##[HELP] Options:

#loading the modules
#extra_modules
module load qualimap
module load parallel

#setting all parameters (these could be changed)
PROJECT_DIR="";
ENSEMBL="current";
SAMPLE_DIR="$PROJECT_DIR/mapped";
OUTPUT_DIR="$PROJECT_DIR/qualimap";
SCRATCH_DIR=~;

NODEFILE="";
if [ -z "$BATCH_FILE" ];
then
        #variable is empty or unset
        SAMPLE_FILE="$PROJECT_DIR/jobs/samples.txt";
else
        SAMPLE_FILE=$BATCH_FILE
fi

#the actual script
JOBID="";
mkdir -p $SCRATCH_DIR/$JOBID;
TMPDIR=$SCRATCH_DIR/$JOBID;
TMP_DIR=`mktemp -d -t tmp.XXXXXXXX`;
cd $TMP_DIR;

cd $TMP_DIR;

mkdir -p $OUTPUT_DIR;

#setting parallel environment
export PARALLEL="--workdir . --env PATH --env LD_LIBRARY_PATH --env LOADEDMODULES --env _LMFILES_ --env MODULE_VERSION --env MODULEPATH --env MODULEVERSION_STACK --env MODULESHOME --env OMP_DYNAMICS --env OMP_MAX_ACTIVE_LEVELS --env OMP_NESTED --env OMP_NUM_THREADS --env OMP_SCHEDULE --env OMP_STACKSIZE --env OMP_THREAD_LIMIT --env OMP_WAIT_POLICY";
#end setting parallel environment
cat $NODEFILE | sort | uniq > nodefile

for SAMPLE in `tail -n +2 $SAMPLE_FILE`;
do
        echo "
		cd $TMP_DIR
		mkdir $SAMPLE
		cd $SAMPLE
		rsync -ahr $SAMPLE_DIR/$SAMPLE.bam .
		#check if copy success, else exit
		rc=\$?; if [[ \$rc != 0 ]]; then exit \$rc; fi
		
		#run qualimap
		qualimap bamqc -bam $SAMPLE.bam -outdir $SAMPLE\"_qualimap\" --java-mem-size=120G
		#check if success, else exit
		rc=\$?; if [[ \$rc != 0 ]]; then exit \$rc; fi
		
		rm $SAMPLE.bam;
		rsync -ahr $SAMPLE* $OUTPUT_DIR/
		#check if success, else exit
		rc=\$?; if [[ \$rc != 0 ]]; then exit \$rc; fi
		cd ..; rm -r $SAMPLE
	" >> $TMP_DIR/$SAMPLE.sh;
        echo "$TMP_DIR/$SAMPLE.sh" >> commands.txt
done

cat commands.txt | parallel --sshloginfile nodefile -j 1 'sh {} > {}.log 2> {}.err'

rc=$?; if [[ $rc != 0 ]]; then exit $rc; fi


