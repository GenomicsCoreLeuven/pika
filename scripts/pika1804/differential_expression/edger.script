#!/bin/bash -l
##[RUN] WALLTIME	6:00:00
##[RUN] MEMORY	30gb
##[RUN] NODES	1
##[RUN] CORES_PER_NODE	20
##[RUN] NAME	edger
##[RUN] ACCOUNT	default_project
##[VERSION] pika1804
##[HELP] This tool will do the differential expression analysis for the standard edgeR algorithm
##[HELP] This script requires a sample_condition.csv file in the OUTPUT_DIR before start. This file is a comma seperated file with as heading: SAMPLE,CONDITION
##[HELP] This scripts runtime is limited (few minutes)
##[HELP] You must install edger first in your local R:
##[HELP] Load the R module: module load R
##[HELP] Start R: R
##[HELP] Now you are in an R environment
##[HELP] add a new source to install new tools: source("https://bioconductor.org/biocLite.R")
##[HELP] install edgeR: biocLite("edgeR")
##[HELP] note that this is interactive, and will warn you that you cannot install it in the global directory. Just accept that it will be installed in your personal directory. Also choose the all option when asked to install the needed dependencies.
##[HELP] if gplots is not installed, you have to install it to: install.packages("gplots")
##
##[HOWTO] #edger
##[HOWTO] #Create a data file (conditions.txt), with a CONDITION1, CONDITION2 and a TYPE column
##[HOWTO] #Create a sample_condition.csv file in the OUTPUT_DIR. This comma seperated file has a header: SAMPLE,CONDITION and with each sample the correct condition.
##[HOWTO] #The edgeR module must be installed in your local R directory (see HELP for more info)
##[HOWTO] #start the module:
##[HOWTO] pikasub edger.pbs 

##[HELP] Options:
##[HELP] sample_condition: the full path to the sample conditions file
##[OPTIONS] sample_condition	optional	sed 's:SAMPLE_CONDITIONS=\"\$PROJECT_DIR/jobs/sample_condition.csv\":SAMPLE_CONDITIONS=\"value\":g'

#loading the modules
#extra_modules
module load R
module load parallel

#setting all parameters (these could be changed)
PROJECT_DIR="";
SAMPLE_DIR="$PROJECT_DIR/htseq";
OUTPUT_DIR="$PROJECT_DIR/edger";
SCRATCH_DIR=~;
R_SCRIPT_DIR="$PROJECT_DIR/jobs";
SAMPLE_CONDITIONS="$PROJECT_DIR/jobs/sample_condition.csv";

NODEFILE="";

if [ -z "$BATCH_FILE" ];
then
        #variable is empty or unset
        CONDITION_FILE="$PROJECT_DIR/jobs/conditions.txt";
else
        CONDITION_FILE=$BATCH_FILE
fi


#the actual script
JOBID="";
mkdir -p $SCRATCH_DIR/$JOBID;
TMPDIR=$SCRATCH_DIR/$JOBID;
TMP_DIR=`mktemp -d -t tmp.XXXXXXXX`;
cd $TMP_DIR;
mkdir -p $OUTPUT_DIR

#setting parallel environment
export PARALLEL="--workdir . --env PATH --env LD_LIBRARY_PATH --env LOADEDMODULES --env _LMFILES_ --env MODULE_VERSION --env MODULEPATH --env MODULEVERSION_STACK --env MODULESHOME --env OMP_DYNAMICS --env OMP_MAX_ACTIVE_LEVELS --env OMP_NESTED --env OMP_NUM_THREADS --env OMP_SCHEDULE --env OMP_STACKSIZE --env OMP_THREAD_LIMIT --env OMP_WAIT_POLICY";
#end setting parallel environment
PARALLEL_JOBS=`nproc`;
cat $NODEFILE | sort | uniq > nodefile

for conditions in `tail -n +2 $CONDITION_FILE`;
do
        CONDITION1=`echo $conditions | awk -v FS="," '{print $1}'`
        CONDITION2=`echo $conditions | awk -v FS="," '{print $2}'`
        TYPE=`echo $conditions | awk -v FS="," '{print $3}'`
	COMP_NAME=$CONDITION1"_vs_"$CONDITION2"_"$TYPE;
        mkdir -p $TMP_DIR/$COMP_NAME;
        cd $TMP_DIR/$COMP_NAME;
        rsync -ahrL $SAMPLE_CONDITIONS sample_condition.csv;
        awk -v FS="," -v OFS="," -v type="$TYPE" '{if(NR==1){print "sampleName,fileName,condition"}else{if(type=="strict"){file=".htseq_a10_genes_strand_union.counts"}else{file=".htseq_a0_genes_nostrand_intersectionNonempty.counts"} print $1,$1""file,$2;}}' sample_condition.csv | grep "sampleName\|,$CONDITION1\|,$CONDITION2" > samples.csv;
	cd $TMP_DIR
        echo "
		cd $TMP_DIR/$COMP_NAME
        	rsync -ahr $SAMPLE_DIR/* .
        	#check if copy success, else exit
        	rc=\$?; if [[ \$rc != 0 ]]; then exit \$rc; fi
        	#trimming
        	Rscript $R_SCRIPT_DIR/edger.2conditions.R $CONDITION1 $CONDITION2 > $COMP_NAME\".rscript.log\" 2> $COMP_NAME\".rscript.log\"
        	#check if success, else exit
        	rc=\$?; if [[ \$rc != 0 ]]; then exit \$rc; fi
        	rm *counts
        	mkdir -p $OUTPUT_DIR/$COMP_NAME; rsync -ahr * $OUTPUT_DIR/$COMP_NAME/
        	#check if success, else exit
        	rc=\$?; if [[ \$rc != 0 ]]; then exit \$rc; fi
        	cd ..; rm -r $COMP_NAME
	" >> $TMP_DIR/$COMP_NAME.sh;
        echo "$TMP_DIR/$COMP_NAME.sh" >> commands.txt
done

cat commands.txt | parallel --sshloginfile nodefile -j "$PARALLEL_JOBS" 'sh {} > {}.log 2> {}.err'

rc=$?; if [[ $rc != 0 ]]; then exit $rc; fi

