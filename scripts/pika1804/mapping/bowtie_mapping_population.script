#!/bin/bash -l
##[RUN] WALLTIME	12:00:00
##[RUN] MEMORY	100gb
##[RUN] NODES	5
##[RUN] CORES_PER_NODE	20
##[RUN] NAME	bowtie_mapping_population
##[RUN] ACCOUNT	default_project
##[VERSION] pika1804
##[HELP] This is a batch script: it uses SAMPLE parameters
##[HELP] This tool will map the samples to the reference genome
##[HELP] This script will use only one cpu
##[HELP] This script runs only a 2 minute per 1M reads
##[HELP] The flash parameter needs to be changed
##[HELP] The genome directory in the prolog file needs to be changed
##
##[HOWTO] #Bowtie mapping of populations
##[HOWTO] #Create a data file (samples.txt), with a SAMPLE column
##[HOWTO] #edit the flash parameter in the pbs, and the genome directory in the prolog
##[HOWTO] #start the module:
##[HOWTO] pikasub bowtie_mapping_population.pbs
##
##[HELP] Options:
##[HELP] genome: the genome to use (abriviation if known or full path)
##[OPTIONS] genome	mandatory	sed 's:GENOME_DIR=\"\":GENOME_DIR=\"value\":g'
##[HELP] bowtie_options: change the options of the mapper (standard: --local)
##[OPTIONS] bowtie_options	optional	sed "s:BOWTIE_OPTIONS=\"--local\":BOWTIE_OPTIONS=\"value\":g"


#loading the modules
#extra_modules
module load Bowtie2
module load SAMtools
module load elprep
module load parallel
version_Bowtie2="Bowtie2"

#setting all parameters (these could be changed)
PROJECT_DIR="";
GENOME_DIR="";
SAMPLE_DIR="$PROJECT_DIR/raw";
OUTPUT_DIR="$PROJECT_DIR/mapped";
#this can be NO (for regular files), FLASH (for only flashed data) or BOTH (for both flashed and unflashed data)
FLASH="NO";
SCRATCH_DIR=~;
#This parameter can be changed for multithreaded mapping
#options can be --local or --end-to-end (more options see bowtie2 manual)
#local is ideal for genome data, end is ideal for gbs, quantseq, ...
BOWTIE_OPTIONS="--local";

NODEFILE="";
if [ -z "$BATCH_FILE" ];
then
        #variable is empty or unset
        SAMPLE_FILE="$PROJECT_DIR/jobs/samples.txt";
else
        SAMPLE_FILE=$BATCH_FILE
fi


#the actual script
BOWTIE_GENOME="$GENOME_DIR/$version_Bowtie2/genome";


JOBID="";
mkdir -p $SCRATCH_DIR/$JOBID;
TMPDIR=$SCRATCH_DIR/$JOBID;
TMP_DIR=`mktemp -d -t tmp.XXXXXXXX`;
cd $TMP_DIR;

mkdir -p $OUTPUT_DIR;

#setting parallel environment
export PARALLEL="--workdir . --env PATH --env LD_LIBRARY_PATH --env LOADEDMODULES --env _LMFILES_ --env MODULE_VERSION --env MODULEPATH --env MODULEVERSION_STACK --env MODULESHOME --env OMP_DYNAMICS --env OMP_MAX_ACTIVE_LEVELS --env OMP_NESTED --env OMP_NUM_THREADS --env OMP_SCHEDULE --env OMP_STACKSIZE --env OMP_THREAD_LIMIT --env OMP_WAIT_POLICY";
#end setting parallel environment
PARALLEL_JOBS=`nproc`;
cat $NODEFILE | sort | uniq > nodefile

for SAMPLE in `tail -n +2 $SAMPLE_FILE`;
do
        echo "
                cd $TMP_DIR
                mkdir $SAMPLE
                cd $SAMPLE
                
		rsync -ahrL $SAMPLE_DIR/$SAMPLE*.fastq.gz $TMP_DIR/$SAMPLE/;
		#check if copy success, else exit
                rc=\$?; if [[ \$rc != 0 ]]; then exit \$rc; fi

	
		gunzip *gz;
		FASTQ_FILES=\"\";
		if [ -f $SAMPLE.R2.fastq ];
		then
        		#paired end mapping
        		FASTQ_FILES="-1 $TMP_DIR/$SAMPLE/$SAMPLE.R1.fastq -2 $TMP_DIR/$SAMPLE/$SAMPLE.R2.fastq";
		else
        		#single read mapping
        		FASTQ_FILES="$TMP_DIR/$SAMPLE/$SAMPLE.R1.fastq";
		fi

		THREADS=\`nproc\`
		bowtie2 -q -p \$THREADS --seed 1 $BOWTIE_OPTIONS --rg-id $SAMPLE --rg ID:$SAMPLE --rg LB:$SAMPLE --rg SM:$SAMPLE --rg PU:$SAMPLE --rg PL:illumina --rg CN:GenomicsCoreLeuven -x $BOWTIE_GENOME \$FASTQ_FILES > /dev/stdout 2> $SAMPLE.bowtie2.log | elprep /dev/stdin $SAMPLE\".bam\" --mark-duplicates --sorting-order coordinate --nr-of-threads $THREADS;
		
		#check if pipe success, else exit		
		rcs=\${PIPESTATUS[*]}; rc=0; for i in \${rcs}; do rc=\$((\$i > \$rc ? \$i : \$rc)); done; if [[ \$rc != 0 ]]; then exit \$rc; fi

		rm *fastq

		samtools index -b $SAMPLE".bam";
		#check if samtools success, else exit
                rc=\$?; if [[ \$rc != 0 ]]; then exit \$rc; fi


		mkdir -p $OUTPUT_DIR
		rsync -ahr $SAMPLE* $OUTPUT_DIR/
		#check if copy success, else exit
                rc=\$?; if [[ \$rc != 0 ]]; then exit \$rc; fi
		
		rm -r $TMP_DIR/$SAMPLE

        " >> $TMP_DIR/$SAMPLE.sh;
        echo "$TMP_DIR/$SAMPLE.sh" >> commands.txt
done

cat commands.txt | parallel --sshloginfile nodefile -j "$PARALLEL_JOBS" 'sh {} > {}.log 2> {}.err'

rc=$?; if [[ $rc != 0 ]]; then exit $rc; fi





