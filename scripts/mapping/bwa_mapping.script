#!/bin/bash -l
##[RUN] WALLTIME	12:00:00
##[RUN] MEMORY	100gb
##[RUN] NODES	1
##[RUN] CORES_PER_NODE	20
##[RUN] NAME	bwa_mapping
##[RUN] ACCOUNT	default_project
##[VERSION] pika 16.08 
##[HELP] This tool will map reads using BWA
##[HELP] This script is multithreaded
##[HELP] This script runs only a 2 minute per 1M reads
##[HELP] This script needs to be edited: the sample, flash and genome directory has to be changed
##
##[HOWTO] #BWA mapping
##[HOWTO] #edit in this script the sample, flash and genome directory
##[HOWTO] #start the module:
##[HOWTO] qsub bwa_mapping.pbs
##
##[HELP] Options:
##[HELP] genome: the genome to use (abriviation if known or full path)
##[OPTIONS] genome	mandatory	sed 's:GENOME_DIR=\"\":GENOME_DIR=\"value\":g'
##[HELP] flash: use regular files (NO), only flashed (FLASH) or flashed and unflashed (BOTH)
##[OPTIONS] flash	optional	sed "s:FLASH=\"NO\":FLASH=\"value\":g"
##[HELP] bwa_options: change the options of the mapper (standard: )
##[OPTIONS] bwa_options	optional	sed "s:BWA_OPTIONS=\"\":BWA_OPTIONS=\"value\":g"
##[HELP] sample: the name of the sample
##[OPTIONS] sample	mandatory	sed "s:SAMPLE=\"\":SAMPLE\"value\":g"


#loading the modules
#extra_modules
module load BWA
module load SAMtools
module load picard

#setting all parameters (these could be changed)
PROJECT_DIR="";
GENOME_DIR="";
SAMPLE_DIR="$PROJECT_DIR/raw";
OUTPUT_DIR="$PROJECT_DIR/mapped";
#this can be NO (for regular files), FLASH (for only flashed data) or BOTH (for both flashed and unflashed data)
FLASH="NO";
SCRATCH_DIR=~;
THREADS="20";
SAMPLE="";
BWA_OPTIONS="";

#the actual script
if [ "$FLASH" -ne "NO" ];
then
        SAMPLE_DIR="$PROJECT_DIR/flash";
fi

JOBID="";
mkdir -p $SCRATCH_DIR/$JOBID;
TMPDIR=$SCRATCH_DIR/$JOBID;
TMP_DIR=`mktemp -d -t tmp.XXXXXXXX`;
cd $TMP_DIR;

mkdir -p $TMP_DIR/genome;
cd genome;
rsync -ahrL $GENOME_DIR/* .;

GENOME_DIR="$TMP_DIR/genome/genome.fa";

#do the copy and the mapping
cd $TMP_DIR;

rsync -ahr $SAMPLE_DIR/$SAMPLE*.fastq.gz $TMP_DIR/;
gunzip *gz;
FASTQ_FILES="";
case "$FLASH" in
	"NO")
		#no flash files
		if [ -f $SAMPLE.R2.fastq ];
		then 
			#paired end mapping
			FASTQ_FILES="$TMP_DIR/$SAMPLE.R1.fastq $TMP_DIR/$SAMPLE.R2.fastq";
		else
			#single read mapping
			FASTQ_FILES="$TMP_DIR/$SAMPLE.R1.fastq";
		fi
	;;
	"FLASH")
		FASTQ_FILES="$TMP_DIR/$SAMPLE.extendedFrags.fastq";
	;;
	"BOTH")
		FASTQ_FILES="$TMP_DIR/$SAMPLE.extendedFrags.fastq";
		FASTQ_FILES_SECOND_BATCH="$TMP_DIR/$SAMPLE.notCombined_1.fastq $TMP_DIR/$SAMPLE.notCombined_2.fastq";
	;;
esac

bwa mem -t $THREADS $BWA_OPTIONS $GENOME_DIR $FASTQ_FILES > $TMP_DIR/mapped.sam;
if [ "$FLASH" == "BOTH" ];
then
	bwa mem -t $THREADS $BWA_OPTIONS $GENOME_DIR $FASTQ_FILES_SECOND_BATCH > $TMP_DIR/mapped.notCombined.sam;
fi
rm *fastq;

samtools view -bS -@ $THREADS $TMP_DIR/mapped.sam > $TMP_DIR/mapped.bam;
rm -r $TMP_DIR/mapped.sam;
samtools sort -@ $THREADS $TMP_DIR/mapped.bam $TMP_DIR/$SAMPLE.sorted;
#samtools index -b $TMP_DIR/$SAMPLE.bam;
rm -r $TMP_DIR/mapped.bam;

if [ "$FLASH" == "BOTH" ];
then
	#sort second sam file
	mv $TMP_DIR/$SAMPLE.sorted.bam $TMP_DIR/$SAMPLE.flash.bam;
	rm $TMP_DIR/mapped.bam;
	samtools view -bS -@ $THREADS $TMP_DIR/mapped.notCombined.sam > $TMP_DIR/mapped.bam;
	rm $TMP_DIR/mapped.notCombined.sam;
	samtools sort -@ $THREADS $TMP_DIR/mapped.bam $TMP_DIR/$SAMPLE.notflash;
	rm $TMP_DIR/mapped.bam;
	#samtools index -b $TMP_DIR/$SAMPLE.notflash.bam;
	#merge the 2 bam files
	samtools view -H $TMP_DIR/$SAMPLE.notflash.bam | grep -v '^\@RG' > $TMP_DIR/header.sam;
	samtools view -H $TMP_DIR/$SAMPLE.notflash.bam | grep '^\@RG' | sort -u > $TMP_DIR/rg.sam;
	samtools view -H $TMP_DIR/$SAMPLE.flash.bam | grep '^\@RG' | sort -u >> $TMP_DIR/rg.sam;
	cat $TMP_DIR/rg.sam | sort -u >> $TMP_DIR/header.sam;
	samtools merge -h $TMP_DIR/header.sam $TMP_DIR/merged.bam $TMP_DIR/$SAMPLE.flash.bam $TMP_DIR/$SAMPLE.notflash.bam;
	rm $TMP_DIR/header.sam $TMP_DIR/rg.sam;
	rm $TMP_DIR/$SAMPLE.flash.bam;
	rm $TMP_DIR/$SAMPLE.notflash.bam;
	samtools sort -@ $THREADS $TMP_DIR/merged.bam $TMP_DIR/$SAMPLE.sorted;
	rm $TMP_DIR/merged.bam;
fi

#run picard tools for correcting readgroups...
picard AddOrReplaceReadGroups I=$TMP_DIR/$SAMPLE.sorted.bam O=$TMP_DIR/$SAMPLE.bam RGID=$SAMPLE RGLB=$SAMPLE RGPL=illumina RGSM=$SAMPLE RGPU=$SAMPLE RGCN=GenomicsCoreLeuven CREATE_INDEX=TRUE;

rm $TMP_DIR/$SAMPLE.sorted.bam;

mkdir -p $OUTPUT_DIR;
cd $OUTPUT_DIR;
rsync -ahr $TMP_DIR/$SAMPLE* .;
rm -rf $TMP_DIR;
#rm -rf $SCRATCH_DIR/genome;


