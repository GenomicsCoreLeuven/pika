#!/bin/bash -l
#PBS -l walltime=12:00:00
#PBS -l mem=100gb
#PBS -l nodes=1:ppn=20
#PBS -M MAIL
#PBS -m aeb
#PBS -N bwa_mapping_population
#PBS -A default_project
#This is a worker script: it uses the SAMPLE parameters
##[VERSION] pika 16.08
##[HELP] This is a worker script: it uses SAMPLE parameters
##[HELP] This tool will map the reads to the reference genome
##[HELP] This script will use only one cpu per sample
##[HELP] This script runs only 2 minutes per 1M reads
##[HELP] This scripts needs to be edited: change the flash parameter, and the genome directory in the prolog file
##
##[HOWTO] #BWA mapping for populations
##[HOWTO] #Create a data file (samples.txt), with a SAMPLE column
##[HOWTO] #This uses the 2015a (there can be a more recent worker installed)
##[HOWTO] module load worker/1.6.4-intel-2015a
##[HOWTO] #The script need to be edited: change the flash parameter
##[HOWTO] #The genome directory in the prolog file will need to be changed
##[HOWTO] #start the module:
##[HOWTO] wsub -batch bwa_mapping_population.pbs -data samples.txt -prolog bwa_mapping_population.prolog.sh
##[HOWTO] #When the THREADS variable in this script is changed, this can be ran as multithreaded population mapping, start like this (replace 20 with the number of given threads):
##[HOWTO] wsub -batch bwa_mapping_population.pbs -data samples.txt -prolog bwa_mapping_population.prolog.sh -threaded 20
##
##[HELP] Options:
##[HELP] genome: the genome to use (abriviation if known or full path)
##[OPTIONS] genome	mandatory	sed 's:GENOME_DIR=\"\":GENOME_DIR=\"value\":g'
##[HELP] flash: use regular files (NO), only flashed (FLASH) or flashed and unflashed (BOTH)
##[OPTIONS] flash	optional	sed "s:FLASH=\"NO\":FLASH=\"value\":g"
##[HELP] bwa_options: change the options of the mapper (standard: )
##[OPTIONS] bwa_options	optional	sed "s:BWA_OPTIONS=\"\":BWA_OPTIONS=\"value\":g"


#loading the modules
module use /apps/leuven/thinking/2015a/modules/all 
module use /staging/leuven/stg_00019/software/modulefiles
module load BWA/0.7.12-intel-2015a
module load SAMtools/1.1-intel-2015a
module load picard/2.2.2-Java1.8.0_77

#setting all parameters (these could be changed)
PROJECT_DIR="";
GENOME_DIR="";
SAMPLE_DIR="$PROJECT_DIR/raw";
OUTPUT_DIR="$PROJECT_DIR/mapped";
#this can be NO (for regular files), FLASH (for only flashed data) or BOTH (for both flashed and unflashed data)
FLASH="NO";
SCRATCH_DIR=$VSC_SCRATCH_NODE;
#This parameter can be changed for multithreaded mapping
THREADS="1";


#the actual script
if [ "$FLASH" -ne "NO" ];
then
        SAMPLE_DIR="$PROJECT_DIR/flash";
fi

GENOME_DIR="$GENOME_DIR/bwa/0.7.12/genome.fa";
mkdir -p  $SCRATCH_DIR;
TMPDIR=$SCRATCH_DIR;
TMP_DIR=`mktemp -d -t tmp.XXXXXXXX`;
cd $TMP_DIR;

rsync -ahrL $SAMPLE_DIR/$SAMPLE*.fastq.gz $TMP_DIR/;
gunzip *gz;
FASTQ_FILES="";
case "$FLASH" in
	"NO")
		#no flash files
		if [ -f $SAMPLE.R2.fastq ];
		then 
			#paired end mapping
			FASTQ_FILES="$TMP_DIR/$SAMPLE.R1.fastq $TMP_DIR/$SAMPLE.R2.fastq";
		else
			#single read mapping
			FASTQ_FILES="$TMP_DIR/$SAMPLE.R1.fastq";
		fi
	;;
	"FLASH")
		FASTQ_FILES="$TMP_DIR/$SAMPLE.extendedFrags.fastq";
	;;
	"BOTH")
		FASTQ_FILES="$TMP_DIR/$SAMPLE.extendedFrags.fastq";
		FASTQ_FILES_SECOND_BATCH="$TMP_DIR/$SAMPLE.notCombined_1.fastq $TMP_DIR/$SAMPLE.notCombined_2.fastq";
	;;
esac

bwa mem -t $THREADS $GENOME_DIR $FASTQ_FILES > $TMP_DIR/mapped.sam;
if [ "$FLASH" == "BOTH" ];
then
	bwa mem -t $THREADS $GENOME_DIR $FASTQ_FILES_SECOND_BATCH > $TMP_DIR/mapped.notCombined.sam;
fi
rm *fastq;

samtools view -bS -@ $THREADS $TMP_DIR/mapped.sam > $TMP_DIR/mapped.bam;
rm -r $TMP_DIR/mapped.sam;
samtools sort -@ $THREADS $TMP_DIR/mapped.bam $TMP_DIR/$SAMPLE.sorted;
#samtools index -b $TMP_DIR/$SAMPLE.bam;
rm -r $TMP_DIR/mapped.bam;

if [ "$FLASH" == "BOTH" ];
then
	#sort second sam file
	mv $TMP_DIR/$SAMPLE.sorted.bam $TMP_DIR/$SAMPLE.flash.bam;
	rm $TMP_DIR/mapped.bam;
	samtools view -bS -@ $THREADS $TMP_DIR/mapped.notCombined.sam > $TMP_DIR/mapped.bam;
	rm $TMP_DIR/mapped.notCombined.sam;
	samtools sort -@ $THREADS $TMP_DIR/mapped.bam $TMP_DIR/$SAMPLE.notflash;
	rm $TMP_DIR/mapped.bam;
	#samtools index -b $TMP_DIR/$SAMPLE.notflash.bam;
	#merge the 2 bam files
	samtools view -H $TMP_DIR/$SAMPLE.notflash.bam | grep -v '^\@RG' > $TMP_DIR/header.sam;
	samtools view -H $TMP_DIR/$SAMPLE.notflash.bam | grep '^\@RG' | sort -u > $TMP_DIR/rg.sam;
	samtools view -H $TMP_DIR/$SAMPLE.flash.bam | grep '^\@RG' | sort -u >> $TMP_DIR/rg.sam;
	cat $TMP_DIR/rg.sam | sort -u >> $TMP_DIR/header.sam;
	samtools merge -h $TMP_DIR/header.sam $TMP_DIR/merged.bam $TMP_DIR/$SAMPLE.flash.bam $TMP_DIR/$SAMPLE.notflash.bam;
	rm $TMP_DIR/header.sam $TMP_DIR/rg.sam;
	rm $TMP_DIR/$SAMPLE.flash.bam;
	rm $TMP_DIR/$SAMPLE.notflash.bam;
	samtools sort -@ $THREADS $TMP_DIR/merged.bam $TMP_DIR/$SAMPLE.sorted;
	rm $TMP_DIR/merged.bam;
fi

#run picard tools for correcting readgroups...
picard AddOrReplaceReadGroups I=$TMP_DIR/$SAMPLE.sorted.bam O=$TMP_DIR/$SAMPLE.bam RGID=$SAMPLE RGLB=$SAMPLE RGPL=illumina RGSM=$SAMPLE RGPU=$SAMPLE RGCN=GenomicsCoreLeuven CREATE_INDEX=TRUE;

rm $TMP_DIR/$SAMPLE.sorted.bam;

mkdir -p $OUTPUT_DIR;
cd $OUTPUT_DIR;
rsync -ahr $TMP_DIR/$SAMPLE* .;
rm -rf $TMP_DIR;



