#!/bin/bash -l
##[RUN] WALLTIME	4:12:00:00
##[RUN] NODES	25
##[RUN] CORES_PER_NODE	1
##[RUN] MEMORY	120gb
##[RUN] NAME	freebayes_pacbio_amplicons
##[RUN] ACCOUNT	default_project 
##[VERSION] pikaDEV
##[HELP] This is batch  script: it uses REGION parameter (region is chr:begin-end)
##[HELP] This tool will do a variant calling in the given region
##[HELP] This script will use only one cpu, it can use a lot of RAM (depends on the number of input files), so only use 1 cpu per node, preferable to start with 120Gb per node
##[HELP] This scripts runtime depends on the compelity of the region, the number of samples and the depth of the region
## [HELP] This script needs to be changed: change the genome directory, optional the freebayes options (and output file name), the output file name of the final file can be changed in the epilog
##
##[HOWTO] #Freebayes
##[HOWTO] #Create a data file (regions.txt), with a REGION column, region is chr:begin-end
##[HOWTO] #start the module: (in case all regions can not be ran in 1 run,
##[HOWTO] #split the regions file in multiple files)
##[HOWTO] pikasub freebayes_regions.pbs
##[HOWTO] #merging happens now in this script
##
##[HELP] Options:
##[HELP] genome: the genome to use (abriviation if known or full path)
##[OPTIONS] genome	mandatory	sed 's:GENOME_DIR=\"\":GENOME_DIR=\"value\":g'
##[HELP] freebayes_options: the options for freebayes (standard= -m 15 -q 15 --use-duplicate-reads --ploidy 2)
##[OPTIONS] freebayes_options	optional	sed "s:FREEBAYES_OPTIONS=\"-m 15 -q 15 --use-duplicate-reads --ploidy 2\":FREEBAYES_OPTIONS=\"value\":g"
##[HELP] freebayes_output_name: the name in the freebayes output
##[OPTIONS] freebayes_output_name	optional	sed "s:OUTPUT_PART=\".m15.q15.useduplicates.ploidy2\":OUTPUT_PART=\"\":"


#loading the modules
#extra_modules
module load freebayes
module load vcflib
module load parallel

#setting all parameters (these could be changed)
PROJECT_DIR="";
GENOME_DIR="";
BAM_DIR="$PROJECT_DIR/mapped";
FREEBAYES_OPTIONS="-m 15 -q 15 --ploidy 2 ";
HAPLOTYPE_OPTIONS="--haplotype-window 500 --haplotype-basis-alleles";
OUTPUT_PART=".m15.q15.useduplicates.ploidy2";
FREEBAYES_OUTPUT_FILE_NAME="freebayes"$OUTPUT_PART".vcf";
OUTPUT_DIR="$PROJECT_DIR/haplotype_calling";
SCRATCH_DIR="~";


NODEFILE="";
if [ -z "$BATCH_FILE" ];
then
        #variable is empty or unset
        REGION_FILE="$PROJECT_DIR/jobs/regions.txt";
else
        REGION_FILE=$BATCH_FILE
fi



#the actual script
JOBID="";
mkdir -p $SCRATCH_DIR/$JOBID;
TMP_DIR=$SCRATCH_DIR/$JOBID;
cd $TMP_DIR;

#setting parallel environment
export PARALLEL="--workdir . --env PATH --env LD_LIBRARY_PATH --env LOADEDMODULES --env _LMFILES_ --env MODULE_VERSION --env MODULEPATH --env MODULEVERSION_STACK --env MODULESHOME --env OMP_DYNAMICS --env OMP_MAX_ACTIVE_LEVELS --env OMP_NESTED --env OMP_NUM_THREADS --env OMP_SCHEDULE --env OMP_STACKSIZE --env OMP_THREAD_LIMIT --env OMP_WAIT_POLICY";
#end setting parallel environment
cat $NODEFILE | sort | uniq > nodefile

NR=0
for REGION in `tail -n +2 $REGION_FILE`;
do
	NR=$((NR + 1))
        echo "
                cd $TMP_DIR
                TMPDIR=$TMP_DIR
		TMP_DIR=\`mktemp -d -t tmp.XXXXXXXX\`
                cd \$TMP_DIR

		bamfiles="";
		for i in \`ls -1 -d $BAM_DIR/*bam\`;
		do
		        bamfiles="\$bamfiles \$i";
		done

		#generate high quality candidates
		freebayes --fasta-reference $GENOME_DIR/genome.fa --region \"$REGION\" $FREEBAYES_OPTIONS \$bamfiles | vcffilter -f \"QUAL > 20\" > vars.vcf;

		#check if success, else exit
                rc=\$?; if [[ \$rc != 0 ]]; then exit \$rc; fi

		#generate haplotypes
		freebayes --fasta-reference $GENOME_DIR/genome.fa $HAPLOTYPE_OPTIONS vars.vcf --region \"$REGION\" $FREEBAYES_OPTIONS \$bamfiles > $NR\".\"$OUTPUT_PART\".vcf\";

		#check if success, else exit
                rc=\$?; if [[ \$rc != 0 ]]; then exit \$rc; fi

        " >> $TMP_DIR/$NR.sh;
        echo "$TMP_DIR/$NR.sh" >> commands.txt
done

cat commands.txt | parallel --sshloginfile nodefile -j 1 'sh {} > {}.log 2> {}.err'

rc=$?; if [[ $rc != 0 ]]; then exit $rc; fi


#all parts are generated: merge
cd $TMP_DIR;
cat */*$OUTPUT_PART*.vcf | vcffirstheader > $TMP_DIR/combined.tmp
grep "^#" $TMP_DIR/combined.tmp > $TMP_DIR/sorted.tmp;
grep -v "^#" $TMP_DIR/combined.tmp | sort -k1,1 -k2,2n >> $TMP_DIR/sorted.tmp;
rm $TMP_DIR/combined.tmp;
cat $TMP_DIR/sorted.tmp | vcfuniq > $OUTPUT_DIR/$FREEBAYES_OUTPUT_FILE_NAME;

rm -rf $TMP_DIR;





