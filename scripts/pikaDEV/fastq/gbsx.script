#!/bin/bash -l
##[RUN] WALLTIME	10:00:00
##[RUN] MEMORY	30gb
##[RUN] NODES	1
##[RUN] CORES_PER_NODE	20
##[RUN] NAME	gbsx
##[RUN] ACCOUNT	default_project
##[VERSION] pikaDEV
##[HELP] This is a batch script: it uses RUN parameters
##[HELP] This tool will demultiplex runs with inline barcodes
##[HELP] It needs a file barcodes.tsv (see gbsx help) in the run directory
##[HELP] This script will use only one cpu per RUN
##[HELP] This script runs for 1.5 houres per RUN using 20 threads
##
##[HOWTO] #GBSX
##[HOWTO] #Create a data file (runs.txt), with a RUN column
##[HOWTO] #The file system should be RUN_DIR/runname/ with the raw gziped fastq files, and the barcodes.tsv file (see gbsx website)
##[HOWTO] #The barcodes.tsv is a tabdelimited file, with (no header) sample, barcode, enzyme
##[HOWTO] #Change the number of nodes to the number of runs you want to demultiplex at once + 1
##[HOWTO] #start the module:
##[HOWTO] pikasub gbsx.pbs
#loading the modules
#extra_modules
module load gbsx
module load parallel

#setting all parameters (these could be changed)
PROJECT_DIR="";
RUN_DIR="$PROJECT_DIR/raw";
OUTPUT_DIR="$PROJECT_DIR/gbsx";
SCRATCH_DIR=~;
THREADS=`nproc`;

NODEFILE="";
if [ -z "$BATCH_FILE" ];
then
        #variable is empty or unset
        RUN_FILE="$PROJECT_DIR/jobs/runs.txt";
else
        RUN_FILE=$BATCH_FILE
fi


#the actual script
#do the copy and demultiplexing
JOBID="";
mkdir -p $SCRATCH_DIR/$JOBID;
TMPDIR=$SCRATCH_DIR/$JOBID;
TMP_DIR=`mktemp -d -t tmp.XXXXXXXX`;
cd $TMP_DIR;

mkdir -p $OUTPUT_DIR;

#setting parallel environment
export PARALLEL="--workdir . --env PATH --env LD_LIBRARY_PATH --env LOADEDMODULES --env _LMFILES_ --env MODULE_VERSION --env MODULEPATH --env MODULEVERSION_STACK --env MODULESHOME --env OMP_DYNAMICS --env OMP_MAX_ACTIVE_LEVELS --env OMP_NESTED --env OMP_NUM_THREADS --env OMP_SCHEDULE --env OMP_STACKSIZE --env OMP_THREAD_LIMIT --env OMP_WAIT_POLICY";
#end setting parallel environment
PARALLEL_JOBS="1";
THREADS=`nproc`;
cat $NODEFILE | sort | uniq > nodefile

for RUN in `tail -n +2 $RUN_FILE`;
do
	echo "
		mkdir -p $TMP_DIR/$RUN
		cd $TMP_DIR/$RUN
		rsync -ahrL $RUN_DIR/$RUN/*.gz .;
		#check exit status
		rc=\$?; if [[ \$rc != 0 ]]; then exit \$rc; fi
		rsync -ahrL $RUN_DIR/$RUN/barcodes.tsv .;
		#check exit status
		rc=\$?; if [[ \$rc != 0 ]]; then exit \$rc; fi


		FILE1=\`find $TMP_DIR -name '*R1*'\`;
		FILE2=\`find $TMP_DIR -name '*R2*'\`;

		THREADS=\`nproc\`;
		#run GBSX
		GBSX --Demultiplexer -t \$THREADS -f1 \$FILE1 -f2 \$FILE2 -i $TMP_DIR/$RUN/barcodes.tsv -o $TMP_DIR/$RUN -gzip true;
	
		#check exit status
		rc=\$?; if [[ \$rc != 0 ]]; then exit \$rc; fi

		rm *$RUN*.gz;
		rm barcodes.tsv;

		mkdir -p $OUTPUT_DIR/$RUN;
		rsync -ahrL * $OUTPUT_DIR/$RUN/;
		#check exit status
		rc=\$?; if [[ \$rc != 0 ]]; then exit \$rc; fi
		rm -rf $TMP_DIR/$RUN;
	
	" >> $TMP_DIR/$RUN.sh;


        echo "$TMP_DIR/$SAMPLE.sh" >> commands.txt
done

cat commands.txt | parallel --sshloginfile nodefile -j "$PARALLEL_JOBS" 'sh {} > {}.log 2> {}.err'

rc=$?; if [[ $rc != 0 ]]; then exit $rc; fi



