#!/bin/bash -l
##[RUN] WALLTIME	6:00:00
##[RUN] MEMORY	30gb
##[RUN] NODES	1
##[RUN] CORES_PER_NODE	20
##[RUN] NAME	flash
##[RUN] ACCOUNT	default_project
##[VERSION] pikaDEV
##[HELP] This is a batch script: it uses SAMPLE parameters
##[HELP] This tool will merge overlapping reads to 1 (ends with 3 files: R1, R2 of non overlapping, and overlapped reads)
##[HELP] This script will use only one cpu per sample
##[HELP] This scripts runtime is limited (less then some houres) 
##
##[HOWTO] #FLASH
##[HOWTO] #Create a data file (samples.txt), with a SAMPLE column
##[HOWTO] #start the module:
##[HOWTO] pikasub flash.pbs

##[HELP] Options:
##[HELP] use_trimmomatic: yes if the result needed to use is a trimmomatic result
##[OPTIONS] use_trimmomatic	optional	sed 's:IS_TRIMMOMATIC=\"no\":IS_TRIMMOMATIC=\"value\":g'

#loading the modules
#extra_modules
module load FLASH
module load parallel

#setting all parameters (these could be changed)
PROJECT_DIR="";
SAMPLE_DIR="$PROJECT_DIR/raw";
OUTPUT_DIR="$PROJECT_DIR/flash";
SCRATCH_DIR=~;
IS_TRIMMOMATIC="no";

NODEFILE="";
if [ -z "$BATCH_FILE" ];
then
        #variable is empty or unset
        SAMPLE_FILE="$PROJECT_DIR/jobs/samples.txt";
else
        SAMPLE_FILE=$BATCH_FILE
fi

#the actual script
JOBID="";
mkdir -p $SCRATCH_DIR/$JOBID;
TMPDIR=$SCRATCH_DIR/$JOBID;
TMP_DIR=`mktemp -d -t tmp.XXXXXXXX`;
cd $TMP_DIR;
mkdir -p $OUTPUT_DIR;

#setting parallel environment
export PARALLEL="--workdir . --env PATH --env LD_LIBRARY_PATH --env LOADEDMODULES --env _LMFILES_ --env MODULE_VERSION --env MODULEPATH --env MODULEVERSION_STACK --env MODULESHOME --env OMP_DYNAMICS --env OMP_MAX_ACTIVE_LEVELS --env OMP_NESTED --env OMP_NUM_THREADS --env OMP_SCHEDULE --env OMP_STACKSIZE --env OMP_THREAD_LIMIT --env OMP_WAIT_POLICY";
#end setting parallel environment
PARALLEL_JOBS=`nproc`;
cat $NODEFILE | sort | uniq > nodefile

for SAMPLE in `tail -n +2 $SAMPLE_FILE`;
do
        echo "
		cd $TMP_DIR
        	mkdir $SAMPLE
        	cd $SAMPLE;
        	rsync -ahr $SAMPLE_DIR/$SAMPLE* .;
        	#check if copy success, else exit
        	rc=\$?; if [[ \$rc != 0 ]]; then exit \$rc; fi
        	#flash
        	flash -z -d $TMP_DIR/$SAMPLE -o $SAMPLE $TMP_DIR/$SAMPLE/$SAMPLE.R1.fastq.gz $TMP_DIR/$SAMPLE/$SAMPLE.R2.fastq.gz > $TMP_DIR/$SAMPLE/$SAMPLE.flash.log 2> $TMP_DIR/$SAMPLE/$SAMPLE.flash.log;
        	#check if success, else exit
        	rc=\$?; if [[ \$rc != 0 ]]; then exit \$rc; fi
        	#trimmomatic output:
		if [ \"$IS_TRIMMOMATIC\" == \"yes\" ];
		then
        		zcat $SAMPLE.extendedFrags.fastq.gz > $SAMPLE.tmp.fastq;
        		zcat $SAMPLE.unpaired.forward.fastq.gz >> $SAMPLE.tmp.fastq;
        		zcat $SAMPLE.unpaired.reverse.fastq.gz >> $SAMPLE.tmp.fastq;
        		rm $SAMPLE.extendedFrags.fastq.gz;
        		mv $SAMPLE.tmp.fastq $SAMPLE.extendedFrags.fastq;
        		gzip $SAMPLE.extendedFrags.fastq;
        		rm $SAMPLE.unpaired*;
		fi
		rm $SAMPLE.R?.fastq.gz;

        	rsync -ahr $SAMPLE.* $OUTPUT_DIR/
        	#check if success, else exit
        	rc=\$?; if [[ \$rc != 0 ]]; then exit \$rc; fi
        	cd ..; rm -r $SAMPLE
	" >> $TMP_DIR/$SAMPLE.sh;
        echo "$TMP_DIR/$SAMPLE.sh" >> commands.txt
done

cat commands.txt | parallel --sshloginfile nodefile -j "$PARALLEL_JOBS" 'sh {} > {}.log 2> {}.err'

rc=$?; if [[ $rc != 0 ]]; then exit $rc; fi






