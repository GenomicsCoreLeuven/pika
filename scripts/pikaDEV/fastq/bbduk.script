#!/bin/bash -l
##[RUN] WALLTIME	6:00:00
##[RUN] MEMORY	30gb
##[RUN] NODES	1
##[RUN] CORES_PER_NODE	20
##[RUN] NAME	bbduk
##[RUN] ACCOUNT	default_project
##[VERSION] pikaDEV
##[HELP] This is a batch script: it uses SAMPLE parameters
##[HELP] This tool will trim adaptors and the poly a tail 
##[HELP] This scripts runtime is limited
##
##[HOWTO] #bbduk
##[HOWTO] #Create a data file (samples.txt), with a SAMPLE column
##[HOWTO] #start the module:
##[HOWTO] qsub bbduk.pbs 

##[HELP] Options:
##[HELP] genome: the genome used for the other steps in a pipeline (your adapters should be in ../../adapters/trimmomatic/TruSeq3-PE.fa for regular adapters, or in ../../adapters/rna_polyA/adapter_polyA.fa for 3 prime rna seq (like quantseq))
##[OPTIONS] genome	mandatory	sed 's:GENOME_DIR=\"\":GENOME_DIR=\"value\":g'
##[HELP] is_rna: yes if the rna trimming must be used (poly AAAA) (for quantseq)
##[OPTIONS] is_rna	optional	sed 's:IS_RNA=\"no\":IS_RNA=\"value\":g'
##[HELP] threads: the number of threads to use per job
##[OPTIONS] threads	optional	sed 's:THREADS=1:THREADS=value:g'

#loading the modules
#extra_modules
module load bbtools;
module load parallel

#setting all parameters (these could be changed)
PROJECT_DIR="";
SAMPLE_DIR="$PROJECT_DIR/fastq";
OUTPUT_DIR="$PROJECT_DIR/bbduk";
SCRATCH_DIR=~;
GENOME_DIR="";
THREADS=1;

NODEFILE="";

if [ -z "$BATCH_FILE" ];
then
        #variable is empty or unset
        SAMPLE_FILE="$PROJECT_DIR/jobs/samples.txt";
else
        SAMPLE_FILE=$BATCH_FILE
fi


#batchline

if [ "$IS_RNA" == "no" ];
then
	REF="ref=$GENOME_DIR/../../adapters/bbduk/truseq.fa.gz";
else
	REF="ref=$GENOME_DIR/../../adapters/rna_polyA/adapter_polyA.fa,$GENOME_DIR/../../adapters/bbduk/truseq.fa.gz";
fi 

#the actual script
JOBID="";
mkdir -p $SCRATCH_DIR/$JOBID;
TMPDIR=$SCRATCH_DIR/$JOBID;
TMP_DIR=`mktemp -d -t tmp.XXXXXXXX`;
cd $TMP_DIR;

#setting parallel environment
export PARALLEL="--workdir . --env PATH --env LD_LIBRARY_PATH --env LOADEDMODULES --env _LMFILES_ --env MODULE_VERSION --env MODULEPATH --env MODULEVERSION_STACK --env MODULESHOME --env OMP_DYNAMICS --env OMP_MAX_ACTIVE_LEVELS --env OMP_NESTED --env OMP_NUM_THREADS --env OMP_SCHEDULE --env OMP_STACKSIZE --env OMP_THREAD_LIMIT --env OMP_WAIT_POLICY";
#end setting parallel environment
PARALLEL_JOBS=`nproc`;

cat $PBS_NODEFILE | sort | uniq > nodefile

for SAMPLE in `tail -n +2 $SAMPLE_FILE`;
do
        echo "
		cd $TMP_DIR
		mkdir $SAMPLE
		cd $SAMPLE
		rsync -ahr $SAMPLE_DIR/$SAMPLE.R1.fastq.gz .
	        #check if copy success, else exit
        	rc=\$?; if [[ \$rc != 0 ]]; then exit \$rc; fi
		gunzip *gz
        	#trimming
        	bbduk.sh in=$SAMPLE\".R1.fastq\" out=$SAMPLE\"_trimmed.R1.fastq\" $REF k=13 ktrim=r forcetrimleft=11 useshortkmers=t mink=3 qtrim=t trimq=10 minlength=20 -Xmx20g
        	#check if success, else exit
        	rc=\$?; if [[ \$rc != 0 ]]; then exit \$rc; fi
        	rm $SAMPLE.R1.fastq; mv $SAMPLE\"_trimmed.R1.fastq\" $SAMPLE\".R1.fastq\"; gzip $SAMPLE.R1.fastq
        	rsync -ahr $SAMPLE.R1.fastq.gz $OUTPUT_DIR/
        	#check if success, else exit
        	rc=\$?; if [[ \$rc != 0 ]]; then exit \$rc; fi
	" >> $TMP_DIR/$SAMPLE.sh;
        echo "$TMP_DIR/$SAMPLE.sh" >> commands.txt
done

cat commands.txt | parallel --sshloginfile nodefile -j "$PARALLEL_JOBS" 'sh {} > {}.log 2> {}.err'

rc=$?; if [[ $rc != 0 ]]; then exit $rc; fi

