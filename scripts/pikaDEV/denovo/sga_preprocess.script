#!/bin/bash -l
##[RUN] WALLTIME	2:00:00:00
##[RUN] MEMORY	120gb
##[RUN] NODES	2
##[RUN] CORES_PER_NODE	20
##[RUN] NAME	sga_preprocess
##[RUN] ACCOUNT	default_project
##[VERSION] pikaDEV 
##[HELP] This is batch  script: it uses SAMPLE parameter
##[HELP] This tool do the sga preprocessing
##[HELP] Runtime depends on the indexing step
##
##[HOWTO] #SGA preprocess
##[HOWTO] #Create a data file (samples.txt), with a SAMPLE and a THREADS column
##[HOWTO] #start the module:
##[HOWTO] #for only using 1 thread per sample:
##[HOWTO] pikasub sga_preprocess.pbs
#loading the modules
#extra_modules
module load SGA
module load parallel

#setting all parameters (these could be changed)
PROJECT_DIR="";
SAMPLE_DIR="$PROJECT_DIR/trimmomatic";
OUTPUT_DIR="$PROJECT_DIR/sga_preprocess";
SCRATCH_DIR="$PROJECT_DIR/tmp";

NODEFILE="";
if [ -z "$BATCH_FILE" ];
then
        #variable is empty or unset
        SAMPLE_FILE="$PROJECT_DIR/jobs/samples.txt";
else
        SAMPLE_FILE=$BATCH_FILE
fi


#the actual script
JOBID="";
mkdir -p $SCRATCH_DIR/$JOBID;
TMP_DIR=$SCRATCH_DIR/$JOBID;
cd $TMP_DIR;

#setting parallel environment
export PARALLEL="--workdir . --env PATH --env LD_LIBRARY_PATH --env LOADEDMODULES --env _LMFILES_ --env MODULE_VERSION --env MODULEPATH --env MODULEVERSION_STACK --env MODULESHOME --env OMP_DYNAMICS --env OMP_MAX_ACTIVE_LEVELS --env OMP_NESTED --env OMP_NUM_THREADS --env OMP_SCHEDULE --env OMP_STACKSIZE --env OMP_THREAD_LIMIT --env OMP_WAIT_POLICY";
#end setting parallel environment
cat $NODEFILE | sort | uniq > nodefile

for SAMPLE in `tail -n +2 $SAMPLE_FILE`;
do
        echo "
                cd $TMP_DIR
                TMPDIR=$TMP_DIR
                TMP_DIR=\`mktemp -d -t tmp.XXXXXXXX\`
                cd \$TMP_DIR

		rsync -ahrL $SAMPLE_DIR/$SAMPLE.R?.fastq.gz .;
		#check if success, else exit
                rc=\$?; if [[ \$rc != 0 ]]; then exit \$rc; fi
		gunzip *gz;

		FASTQ_FILES=\"\";
		if [ -f $SAMPLE.R2.fastq ];
		then
		        #paired end
		        FASTQ_FILES=\"-p 1 $TMP_DIR/$SAMPLE.R1.fastq $TMP_DIR/$SAMPLE.R2.fastq\";
		else
		        #single read
		        FASTQ_FILES=\"-p 0 $TMP_DIR/$SAMPLE.R1.fastq\";
		fi


		sga preprocess \$FASTQ_FILES > \$TMP_DIR/$SAMPLE.sga_readfile.fastq 2> \$TMP_DIR/$SAMPLE.sga_preprocess.log;
		#check if success, else exit
                rc=\$?; if [[ \$rc != 0 ]]; then exit \$rc; fi

		rm \$TMP_DIR/$SAMPLE.R?.fastq;
		sga index -a ropebwt --no-reverse -t \$THREADS \$TMP_DIR/$SAMPLE.sga_readfile.fastq > \$TMP_DIR/$SAMPLE.sga_index.log;

		#check if success, else exit
                rc=\$?; if [[ \$rc != 0 ]]; then exit \$rc; fi

		gzip \$TMP_DIR/$SAMPLE*.fastq;
		mkdir -p $OUTPUT_DIR;
		rsync -ahrL \$TMP_DIR/* $OUTPUT_DIR/;
		
		#check if success, else exit
                rc=\$?; if [[ \$rc != 0 ]]; then exit \$rc; fi

		rm -rf \$TMP_DIR;
        " >> $TMP_DIR/$SAMPLE.sh;
        echo "$TMP_DIR/$SAMPLE.sh" >> commands.txt
done

cat commands.txt | parallel --sshloginfile nodefile -j 1 'sh {} > {}.log 2> {}.err'

rc=$?; if [[ $rc != 0 ]]; then exit $rc; fi




