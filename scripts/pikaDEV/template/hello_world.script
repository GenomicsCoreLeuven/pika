#!/bin/bash -l
##[RUN] WALLTIME	00:05:00
##[RUN] MEMORY	50gb
##[RUN] NAME	hello_world
##[RUN] ACCOUNT	default_project
##[RUN] NODES	1
##[RUN] CORES_PER_NODE	20
##[VERSION] pika dev [here comes the version of pika where the last changes are made, pika dev for the development fase]
##[HELP] This is the help of the script. Here comes some information for the user on the script.
##[HELP] Usually something about the parameters that can be changed inside the script, or about the runtime
##[HELP] If you use this as a templete, do not forget to change the RUN parameters above. 
##
##[HOWTO] #Here follows the howto. The comment lines should start with #, as the executable lines should start without (like in a bash or sh script).
##[HOWTO] #Usually there are comments like which module should be loaded before, which data file the script needs, ...
##[HOWTO] #The qsub command:
##[HOWTO] qsub hello_world.pbs
##[HOWTO] #Note that the executable line does not start with #, also in the pipelines and in the tool the ##[HOWTO] will be trimmed.
##
##[HELP] Options:
##[HELP] text: the text to print to the file
##[OPTIONS] text	optional	sed "s:TEXT=\"Hello world\":TEXT=\"value\":g"


#loading the modules
#extra_modules
##here all needed modules will be loaded, handy on 1 place, easy to find the used versions

#setting all parameters (these could be changed)
##here different parameters are set. In the copy of the tool, PROJECT_DIR and GENOME_DIR are automatically changed.
##SAMPLE_DIR and OUTPUT_DIR can be changed in the pipeline, together with other parameters. It is a good practice to make an environment variable for every possible tool (so that users can edit tool parameters, without having to surf through the code)
##new parameters are prefereble to have self-explainable names.
PROJECT_DIR="";
GENOME_DIR="";
SAMPLE_DIR="$PROJECT_DIR/input";
OUTPUT_DIR="$PROJECT_DIR/output";
SCRATCH_DIR=~;
TEXT="Hello world";

#the actual script
##here the actual code of the script is written. There are no limitations to the code itself, as long as it is well documented in the help, howto, and parameters.
JOBID="";
mkdir -p $SCRATCH_DIR/$JOBID;
TMPDIR=$SCRATCH_DIR/$JOBID;
TMP_DIR=`mktemp -d -t tmp.XXXXXXXX`;
cd $TMP_DIR;

mkdir -p $OUTPUT_DIR;
echo $TEXT > $OUTPUT_DIR/hello_world.txt;
#here the scratch directory is created, and hello_world is written into a file.

rm -r $TMP_DIR;
