#!/bin/bash -l
##[RUN] WALLTIME	12:00:00
##[RUN] MEMORY	100gb
##[RUN] NODES	1
##[RUN] CORES_PER_NODE	20
##[RUN] NAME	bwa_mapping_population
##[RUN] ACCOUNT	default_project
##[VERSION] pikaDEV
##[HELP] This is a batch script: it uses SAMPLE parameters
##[HELP] This tool will map the reads to the reference genome
##[HELP] This script will use only one cpu per sample
##[HELP] This script runs only 2 minutes per 1M reads
##[HELP] This scripts needs to be edited: change the flash parameter, and the genome directory in the prolog file
##
##[HOWTO] #BWA mapping for populations
##[HOWTO] #Create a data file (samples.txt), with a SAMPLE column
##[HOWTO] #The script need to be edited: change the flash parameter
##[HOWTO] #The genome directory in the prolog file will need to be changed
##[HOWTO] #start the module:
##[HOWTO] qsub bwa_mapping_population.pbs
##
##[HELP] Options:
##[HELP] genome: the genome to use (abriviation if known or full path)
##[OPTIONS] genome	mandatory	sed 's:GENOME_DIR=\"\":GENOME_DIR=\"value\":g'
##[HELP] bwa_options: change the options of the mapper (standard: )
##[OPTIONS] bwa_options	optional	sed "s:BWA_OPTIONS=\"\":BWA_OPTIONS=\"value\":g"


#loading the modules
#extra_modules
module load BWA
module load SAMtools
module load elprep
module load parallel
version_BWA="BWA"

#setting all parameters (these could be changed)
PROJECT_DIR="";
GENOME_DIR="";
SAMPLE_DIR="$PROJECT_DIR/raw";
OUTPUT_DIR="$PROJECT_DIR/mapped";
#this can be NO (for regular files), FLASH (for only flashed data) or BOTH (for both flashed and unflashed data)
FLASH="NO";
SCRATCH_DIR=~;
#This parameter can be changed for multithreaded mapping
THREADS="1";
BWA_OPTIONS=""

NODEFILE="";
if [ -z "$BATCH_FILE" ];
then
        #variable is empty or unset
        SAMPLE_FILE="$PROJECT_DIR/jobs/samples.txt";
else
        SAMPLE_FILE=$BATCH_FILE
fi

#the actual script
JOBID="";
mkdir -p $SCRATCH_DIR/$JOBID;
TMPDIR=$SCRATCH_DIR/$JOBID;
TMP_DIR=`mktemp -d -t tmp.XXXXXXXX`;
cd $TMP_DIR;

mkdir -p $OUTPUT_DIR;

#setting parallel environment
export PARALLEL="--workdir . --env PATH --env LD_LIBRARY_PATH --env LOADEDMODULES --env _LMFILES_ --env MODULE_VERSION --env MODULEPATH --env MODULEVERSION_STACK --env MODULESHOME --env OMP_DYNAMICS --env OMP_MAX_ACTIVE_LEVELS --env OMP_NESTED --env OMP_NUM_THREADS --env OMP_SCHEDULE --env OMP_STACKSIZE --env OMP_THREAD_LIMIT --env OMP_WAIT_POLICY";
#end setting parallel environment
PARALLEL_JOBS=`nproc`;
cat $NODEFILE | sort | uniq > nodefile

for SAMPLE in `tail -n +2 $SAMPLE_FILE`;
do
        echo "
                cd $TMP_DIR
                mkdir $SAMPLE
                cd $SAMPLE
                
                rsync -ahrL $SAMPLE_DIR/$SAMPLE*.fastq.gz $TMP_DIR/$SAMPLE/;
                #check if copy success, else exit
                rc=\$?; if [[ \$rc != 0 ]]; then exit \$rc; fi

                gunzip *gz;
                FASTQ_FILES=\"\";
                if [ -f $SAMPLE.R2.fastq ];
                then
                        #paired end mapping
                        FASTQ_FILES="$TMP_DIR/$SAMPLE/$SAMPLE.R1.fastq $TMP_DIR/$SAMPLE/$SAMPLE.R2.fastq";
                else
                        #single read mapping
                        FASTQ_FILES="$TMP_DIR/$SAMPLE/$SAMPLE.R1.fastq";
                fi

                THREADS=\`nproc\`
		BWA_GENOME="$GENOME_DIR/$version_BWA/genome.fa";

		bwa mem -t \$THREADS -M -R "@RG\\tID:$SAMPLE\\tSM:$SAMPLE\\tPL:illumina\\tLB:$SAMPLE\\tPU:$SAMPLE" $BWA_OPTIONS \$BWA_GENOME \$FASTQ_FILES | elprep /dev/stdin $SAMPLE\".bam\" --mark-duplicates --sorting-order coordinate --nr-of-threads \$THREADS;
                
                #check if pipe success, else exit               
                rcs=\${PIPESTATUS[*]}; rc=0; for i in \${rcs}; do rc=\$((\$i > \$rc ? \$i : \$rc)); done; if [[ \$rc != 0 ]]; then exit \$rc; fi

                rm *fastq
                samtools index -b $SAMPLE".bam";
                #check if samtools success, else exit
                rc=\$?; if [[ \$rc != 0 ]]; then exit \$rc; fi

                mkdir -p $OUTPUT_DIR
                rsync -ahr $SAMPLE* $OUTPUT_DIR/
                #check if copy success, else exit
                rc=\$?; if [[ \$rc != 0 ]]; then exit \$rc; fi
                
                rm -r $TMP_DIR/$SAMPLE
        " >> $TMP_DIR/$SAMPLE.sh;
        echo "$TMP_DIR/$SAMPLE.sh" >> commands.txt
done


cat commands.txt | parallel --sshloginfile nodefile -j "$PARALLEL_JOBS" 'sh {} > {}.log 2> {}.err'

rc=$?; if [[ $rc != 0 ]]; then exit $rc; fi


